#ifndef AI_H__
#define AI_H__

#include "board.h"

/*
 IT IS ABSOLUTELY PIVOTAL THAT YOU DO NOT EDIT THIS FILE
 */

/**
 * Requires: nothing.
 * Modifies: nothing.
 * Effects: Chooses a column for the next move
 *          and returns the column index. The
 *          return value must be in range
 *          [0, NUM_COLS-1].
 */
int connect4AI(const Board& board);
int connect4AI2(const Board& board);
int connect4AIH(const Board& board);
int connect4AIM(const Board& board);
int connect4AIE(const Board& board);
int connect4AISE(const Board& board);


bool isWin(int col, Board testboard);
bool noWinSetup(int col, Board testboard);
bool is2WinSetup(int col, Board testboard);

int bestMove(Board testboard);
int bestMovePV(Board testboard);


bool isForceWin(int col, Board testboard);
bool isOpponentForceWin(int col, Board testboard);
bool is2LayerForceWin(int col, Board testboard);
bool is3LayerForceWin(int col, Board testboard);
bool is4LayerForceWin(int col, Board testboard);
bool noForceWinSetup(int col, Board testboard);
bool isMyWinSetup(int col, Board testboard);
int getWinCol(Board testboard);
bool no2WinSetups(int col, Board testboard);

int getnMaxCol(Board testboard, int_fast8_t testAlphaVal, int_fast8_t testBetaVal);
int_fast8_t nMax(int_fast8_t alpha, int_fast8_t beta, Board& testboard);
int numColsFull(Board testboard);

string getFenKey(Board testboard);

//STRINGBOARD FUNCTIONS
int SBgetnMaxCol(Board testboard, int_fast8_t testAlphaVal, int_fast8_t testBetaVal);
int_fast8_t SBnMax(int_fast8_t alpha, int_fast8_t beta, stringBoard& testboard);
bool SBisWin(int col, stringBoard testboard);


#endif /* AI_H__ */
